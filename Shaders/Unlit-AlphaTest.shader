// Upgrade NOTE: replaced 'UNITY_INSTANCE_ID' with 'UNITY_VERTEX_INPUT_INSTANCE_ID'

// This example is an answer to a forum post at:
// http://forum.unity3d.com/threads/gpu-instancing.376635/page-6#post-2721421
//
// it shows how to render a huge amount of animated billboards entirely done on the GPU
// the idea is to prepare one mesh that contains all these billboards with additional
// data stored in TEXCOORD channels for the random animation starting frame, random color, etc.
// 
// download latest version from http://www.console-dev.de
Shader "Custom/Example"
{
Properties {
	_MainTex ("Base (RGB) Trans (A)", 2D) = "white" {}
	_Cutoff ("Alpha cutoff", Range(0,1)) = 0.5
	_Cells ("X= Columns, Y=Rows, Z=Speed", Vector) = (8,8,60,0)
}
SubShader {
	Tags {"Queue"="AlphaTest" "IgnoreProjector"="True" "RenderType"="TransparentCutout"}
	LOD 100
	Cull Off
	Lighting Off

	Pass {  
		CGPROGRAM
			#pragma vertex vert
			#pragma fragment frag
			#pragma target 3.0
			#pragma multi_compile_instancing
			#include "UnityCG.cginc"

			struct appdata_t {
				UNITY_VERTEX_INPUT_INSTANCE_ID
				float4 vertex : POSITION;
				float3 normal : NORMAL;
				float3 color : COLOR0;
				float2 texcoord : TEXCOORD0;
				float2 localpos : TEXCOORD1; // local vertex position. makes it easier because static batched meshes dont have local verts anymore
				float2 frameindex : TEXCOORD2; // x=frameindex, y=unsed
			};

			struct v2f
			{
				UNITY_VERTEX_INPUT_INSTANCE_ID
				float4 vertex : SV_POSITION;
				float2 texcoord : TEXCOORD0;
				float3 color : TEXCOORD1;
			};

			sampler2D _MainTex;
			float4 _MainTex_ST;
			fixed _Cutoff;
			float4 _Cells;

			UNITY_INSTANCING_CBUFFER_START(MyProperties)
			//UNITY_DEFINE_INSTANCED_PROP(fixed4, _Color)
			UNITY_INSTANCING_CBUFFER_END

			// rotate always towards camera
			void Billboard(inout appdata_t v)
			{
				const float3 local = float3(v.localpos.x, v.localpos.y, 0); // this is the quad verts as generated by MakeMesh.cs in the localPos list.
				const float3 offset = v.vertex.xyz - local;

				const float3 upVector = half3(0, 1, 0);
				const float3 forwardVector = UNITY_MATRIX_IT_MV[2].xyz; // camera forward
				const float3 rightVector = normalize(cross(forwardVector, upVector));

				float3 position = 0;
				position += local.x * rightVector;
				position += local.y * upVector;
				position += local.z * forwardVector;

				v.vertex = float4(offset + position, 1);
				v.normal = forwardVector;
			}

			// moves the sprite sheet from left to right and top to bottom
			// 1 2 3 4
			// 4 5 6 7
			// ... and so on
			void AnimateUV(appdata_t v, inout v2f o)
			{
				float frame = v.frameindex.x + floor(_Time.g * _Cells.z);

				o.texcoord.x += fmod(frame, _Cells.x);
				o.texcoord.y -= fmod(floor(frame/ _Cells.y), _Cells.y);

				o.texcoord /= _Cells.xy;
			}

			v2f vert (appdata_t v)
			{
				v2f o;
				UNITY_INITIALIZE_OUTPUT(v2f, o);

				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);

				Billboard(v);

				o.vertex = UnityObjectToClipPos(v.vertex);

				o.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);
				AnimateUV(v, o);

				o.color = v.color;
				return o;
			}
			
			fixed4 frag (v2f i) : SV_Target
			{
				UNITY_SETUP_INSTANCE_ID(i);

				float4 col = tex2D(_MainTex, i.texcoord);
				clip(col.a - _Cutoff);

				col.rgb *= i.color;
				return col;
			}
		ENDCG
	}
}

}
